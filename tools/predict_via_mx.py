# -*- coding: utf8 -*-import src.prepare_data as Dataimport src.build_Nets as Netimport mxnet as mximport numpy as npfrom sklearn.model_selection import train_test_splitimport logginglogging.getLogger().setLevel(logging.DEBUG)def main():    batch_size = 10    base_lr = 0.1    num_epoch = 10    train_val_ratio = 0.3    stress, temp, max_stress, max_temp = Data.load_and_interp(Data.comsol_dir)    samples = Data.crop_samples(stress, temp)    x = []    y = []    for temp_, max_stress_ in samples:        x.append(temp_)        y.append(max_stress_)    x = np.array(x)    y = np.array(y)  # * max_stress    x_train, x_val, y_train, y_val = train_test_split(x, y, test_size=train_val_ratio, random_state=0)    train_iter = Data.generate_mx_array_itr(x_train, y_train, batch_size)    val_iter = Data.generate_mx_array_itr(x_val, y_val, batch_size)    lenet = Net.build_lenet()    model = mx.mod.Module(        context=mx.gpu(0),  # use GPU 0 for training, others are same as before        symbol=lenet,        data_names=['data'],        label_names=['label'])    model.fit(        train_iter,        eval_data=val_iter,        optimizer='sgd',        optimizer_params={'learning_rate': base_lr},        eval_metric='RMSE',        num_epoch=num_epoch,        batch_end_callback=mx.callback.Speedometer(batch_size, 20)    )if __name__ == '__main__':    main()